/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "taskScheduler.h"
#include "stm.h"
#include "encoder.h"
#include "uart.h"
#include <stdio.h>
#include "motor.h"
#include "lpf.h"
#include "pid.h"
#include "commonMacros.h"
#include "observer.h"

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
 typedef struct
{
        uint32 cnt_1ms;
        uint32 cnt_10ms;
        uint32 cnt_100ms;
}TestCnt;

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
TestCnt stTestCnt;

float32 w_ref;
float32 w_ref_lpf;
float32 w_ref_lpf_prev;

float32 w_1;
float32 w_lpf_1;
float32 w_lpf_prev_1;

float32 w_2;
float32 w_lpf_2;
float32 w_lpf_prev_2;

float32 encPos_1;
float32 prev_encPos_1;
float32 w_err_1;

float32 encPos_2;
float32 prev_encPos_2;
float32 w_err_2;

float32 v_in;
char str[20];
/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
static void Task1ms(void);
static void Task10ms(void);
static void Task100ms(void);

/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
void appNoTask(void)
{
    countEncTicks();
}

static void Task1ms(void)
{
    static float32 w_ss = -4 * PI;
//
//    if (stTestCnt.cnt_1ms < 2000 || stTestCnt.cnt_1ms >= 13000)
//    {
//        w_ref = 0.0;
//    }
//    else if (stTestCnt.cnt_1ms < 5000)
//    {
//        w_ref = w_ss / 3 * (stTestCnt.cnt_1ms - 2000) / 1000;
//    }
//    else if (stTestCnt.cnt_1ms < 10000)
//    {
//        w_ref =w_ss;
//    }
//    else if (stTestCnt.cnt_1ms < 13000)
//    {
//        w_ref = w_ss / 3 * (13000 - stTestCnt.cnt_1ms) / 1000;
//    }

    w_ref = w_ss;

    w_ref_lpf = lowPassFilter(w_ref, w_ref_lpf_prev);
    w_ref_lpf_prev = w_ref_lpf;

    encPos = getEncPos(ENC1);
    w = (encPos - prev_encPos) * 1000;
    prev_encPos = encPos;
    w_lpf = lowPassFilter(w, w_lpf_prev);
    w_lpf_prev = w_lpf;

    w_err = w_ref_lpf - w_lpf;

    v_in = pidController(MOTOR1, w_err, w_ref_lpf);

    v_in = (v_in > 12) ? 12 : -v_in;

//    if (stTestCnt.cnt_1ms >= 15000)
//    {
//        v_in = 0;
//    }

//    observeMotor(MOTOR2, v_in, encPos);

    setMotorPower(v_in / 12, 0);

    stTestCnt.cnt_1ms++;
}

static void Task10ms(void)
{
    stTestCnt.cnt_10ms++;
}

static void Task100ms(void)
{
    static float64 a1, a2, a3;

//    a1 = getEncPos(ENC2);
//    a3 = (a1 - a2) * 10;
//    a2 = a1;
    a3 = getThetaHat(MOTOR2);
    sprintf(str, "%.1f %.1f %.1f\r\n", (float32)stTestCnt.cnt_100ms/10, w_lpf, g_int_i_h[MOTOR2]);
    for (int i =0;i < 20; i++)
    {
        _out_uart3(str[i]);
    }

    stTestCnt.cnt_100ms++;
}

void taskScheduler(void)
{
    if(schedulingInfo.f_1ms == 1)
    {
        schedulingInfo.f_1ms = 0;
        Task1ms();

        if(schedulingInfo.f_10ms == 1)
        {
            schedulingInfo.f_10ms = 0;
            Task10ms();
        }

        if(schedulingInfo.f_100ms == 1)
        {
            schedulingInfo.f_100ms = 0;
            Task100ms();
        }
    }
}
