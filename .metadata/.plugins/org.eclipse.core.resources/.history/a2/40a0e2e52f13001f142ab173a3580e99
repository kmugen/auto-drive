/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "task.h"
#include "commonMacros.h"
#include "pid.h"
#include "observer.h"
#include "lpf.h"
#include "encoder.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
float32 w_1;
float32 w_lpf_1;
float32 w_lpf_prev_1;

float32 w_2;
float32 w_lpf_2;
float32 w_lpf_prev_2;

float32 encPos_1;
float32 prev_encPos_1;
float32 w_err_1;

float32 encPos_2;
float32 prev_encPos_2;
float32 w_err_2;

float32 v_in_1;
float32 v_in_2;

/*********************************************************************************************************************/
/*--------------------------------------------Private Variables/Constants--------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
extern void taskMotorCtrl(float32 w_ref_1, float32 w_ref_2, uint8 motor_on)
{
    encPos_1 = getEncPos(MOTOR1);
    w_1 = getWHat(MOTOR1);

    encPos_2 = getEncPos(MOTOR2);
    w_2 = getWHat(MOTOR2);

    w_lpf_1 = lowPassFilter(w_1, w_lpf_prev_1, 0.001);
    w_lpf_prev_1 = w_lpf_1;

    w_lpf_2 = lowPassFilter(w_2, w_lpf_prev_2, 0.001);
    w_lpf_prev_2 = w_lpf_2;

    if (w_ref_2 != 0)
    {
        w_err_1 = w_ref_1 - w_lpf_1;
        w_err_2 = w_ref_2 - w_lpf_2;

        v_in_1 = -1 * pidController(MOTOR1, w_err_1, w_ref_1);
        v_in_2 = pidController(MOTOR2, w_err_2, w_ref_2);

        if (v_in_1 < 0)
        {
            v_in_1 = 0;
        }
        if (v_in_1 > 12)
        {
            v_in_1 = 12;
        }

        if (v_in_2 < 0)
        {
            v_in_2 = 0;
        }
        if (v_in_2 > 12)
        {
            v_in_2 = 12;
        }

        if (motor_on == FALSE)
        {
            v_in_1 = v_in_2 = 0;
        }
    }
    else
    {
        v_in_1 = v_in_2 = 0;
    }


    observeMotor(MOTOR1, v_in_1, encPos_1);

    observeMotor(MOTOR2, v_in_2, encPos_2);

    setMotorPower(v_in_1 / 12, v_in_2 / 12);
}
