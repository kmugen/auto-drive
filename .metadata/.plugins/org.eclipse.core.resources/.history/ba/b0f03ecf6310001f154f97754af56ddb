/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "stm.h"
#include "IfxStm.h"
#include "IfxCpu_Irq.h"
#include "Ifx_Types.h"
#include "isrPrio.h"

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
typedef struct
{
        Ifx_STM             *stmSfr;
        IfxStm_CompareConfig stmConfig;
} App_Stm;

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
App_Stm g_stm;
uint32 g_cnt_1ms = 0;
schedulingFlag schedulingInfo;

/*********************************************************************************************************************/
/*-------------------------------------------Interrupt Service Routines----------------------------------------------*/
/*********************************************************************************************************************/
IFX_INTERRUPT(ISR_STM, 0, ISR_PRIO_STM);
void ISR_STM(void)
{
    IfxCpu_enableInterrupts();

    IfxStm_clearCompareFlag(g_stm.stmSfr, g_stm.stmConfig.comparator);
    IfxStm_increaseCompare(g_stm.stmSfr, g_stm.stmConfig.comparator, 100000);

    g_cnt_1ms++;

    if ((g_cnt_1ms % 1) == 0)
    {
        schedulingInfo.f_1ms = 1;
    }
    if ((g_cnt_1ms % 10) == 0)
    {
        schedulingInfo.f_10ms = 1;
    }
    if ((g_cnt_1ms % 100) == 0)
    {
        schedulingInfo.f_100ms = 1;
    }
}

/*********************************************************************************************************************/
/*--------------------------------------------Function Implementations-----------------------------------------------*/
/*********************************************************************************************************************/
void initStm(void)
{
    boolean irqState = IfxCpu_disableInterrupts();
    IfxStm_enableOcdsSuspend(&MODULE_STM0);
    g_stm.stmSfr = &MODULE_STM0;
    IfxStm_initCompareConfig(&g_stm.stmConfig);

    g_stm.stmConfig.triggerPriority = ISR_PRIO_STM;
    g_stm.stmConfig.typeOfService   = IfxSrc_Tos_cpu0;
    g_stm.stmConfig.ticks           = 100000;

    IfxStm_initCompare(g_stm.stmSfr, &g_stm.stmConfig);

    IfxCpu_restoreInterrupts(irqState);
}
