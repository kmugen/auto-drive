/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "observer.h"
#include "Ifx_Types.h"
#include "commonMacros.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define J   2.09E-5
#define B   0.00002
#define Kt  0.042
#define Kb  0.042
#define R   8.4
#define L   1.16

#define L1  21.8017
#define L2  41.5731
#define L3  -0.5167

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
float32 g_theta_h[2];
float32 g_w_h[2];
float32 g_i_h[2];

float32 g_int_theta_h[2];
float32 g_int_w_h[2];
float32 g_int_i_h[2];

/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
void observeMotor(uint8 chn, float32 v_in, float32 theta)
{
    float32 tmp = (-1.0 * g_i_h[chn] * R / L) + (-1.0 * g_w_h[chn] * Kb / L) + (v_in / L) + ((theta - g_theta_h[chn]) * L1);
}

float32 getThetaHat(size_t chn)
{
    return g_theta_h[chn];
}

float32 getWHat(size_t chn)
{
    return g_w_h[chn];
}

float32 getIHat(size_t chn)
{
    return g_i_h[chn];
}
