/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "taskScheduler.h"
#include "stm.h"
#include "encoder.h"
#include "uart.h"
#include <stdio.h>
#include "motor.h"

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
 typedef struct
{
        uint32 cnt_1ms;
        uint32 cnt_10ms;
        uint32 cnt_100ms;
}TestCnt;

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
TestCnt stTestCnt;

float32 w_ref;
float32 w;
float64 encPos;
float64 prev_encPos;

char str[20];
/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
static void Task1ms(void);
static void Task10ms(void);
static void Task100ms(void);

/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
void appNoTask(void)
{
    countEncTicks();
}

static void Task1ms(void)
{
    stTestCnt.cnt_1ms++;


}

static void Task10ms(void)
{
    stTestCnt.cnt_10ms++;

    if (stTestCnt.cnt_1ms < 5000 || stTestCnt.cnt_1ms >= 20000)
    {
        w_ref = 0.0;
    }
    else if (stTestCnt.cnt_1ms < 10000)
    {
        w_ref = 0.1308 * (stTestCnt.cnt_1ms - 5000);
    }
    else if (stTestCnt.cnt_1ms < 15000)
    {
        w_ref = 654.0;
    }
    else if (stTestCnt.cnt_1ms < 20000)
    {
        w_ref = 0.1308 * (20000 - stTestCnt.cnt_1ms);
    }

    encPos = getEncPos(ENC2);
    w = (encPos - prev_encPos) * 100;
    prev_encPos = encPos;
    setMotorPower(0, w_ref / 654.3);

}

static void Task100ms(void)
{
    stTestCnt.cnt_100ms++;
    sprintf(str, "%.2f %.1f %.1f\r\n", (float32)stTestCnt.cnt_100ms/10, w_ref, w);
    for (int i =0;i < 20; i++)
    {
        _out_uart3(str[i]);
    }

}

void taskScheduler(void)
{
    if(schedulingInfo.f_1ms == 1)
    {
        schedulingInfo.f_1ms = 0;
        Task1ms();

        if(schedulingInfo.f_10ms == 1)
        {
            schedulingInfo.f_10ms = 0;
            Task10ms();
        }

        if(schedulingInfo.f_100ms == 1)
        {
            schedulingInfo.f_100ms = 0;
            Task100ms();
        }
    }
}
