/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "ultrasonic.h"
#include "extIrq.h"
#include "delay.h"
#include "isrPrio.h"

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
uint64 g_cnt_r = 0;  // 초음파 측정 시작 시점
uint64 g_cnt_f = 0;  // 초음파 측정 종료 시점

/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/

// 초음파 Echo pin이 Rising edge일 때, 인터럽트 발생.
IFX_INTERRUPT(ISR_US_R, 0, ISR_PRIO_US_ECHO_R);
void ISR_US_R(void)
{
    g_cnt_r = getCurStmTicks(); // 현재 시스템 타이머 시간.
}

// 초음파 Echo pin이 Falling edge일 때, 인터럽트 발생.
IFX_INTERRUPT(ISR_US_F, 0, ISR_PRIO_US_ECHO_F);
void ISR_US_F(void)
{
    g_cnt_f = getCurStmTicks() - g_cnt_r; // 현재 시스템 시간 - Echo pin Rising에서의 시간
}

void initUltrasonic(void)
{
    setPinOutput(PIN_US_TRIG);  // trig pin 출력 설정.

    // Echo pin Hardware 배선 시에는, 점퍼선을 2가닥으로 나누어 GPIO 핀 2개에 배분한다.
    initExtIrq(PIN_US_ECHO_R, risingEdgeDetection, ISR_PRIO_US_ECHO_R); // Echo pin - Rising edge 인터럽트 세팅
    initExtIrq(PIN_US_ECHO_F, fallingEdgeDetection, ISR_PRIO_US_ECHO_F); // Echo pin - Falling edge 인터럽트 세팅
}

void trigUltrasonic(void)
{
    setPinLow(PIN_US_TRIG);
    delayUs(2);
    setPinHigh(PIN_US_TRIG);
    delayUs(10);
    setPinLow(PIN_US_TRIG);
}

float32 getUsDist(void)
{
    float32 dist = ((float32)g_cnt_f / IfxStm_getFrequency(&MODULE_STM0) * 1000000.0f / 58.8235f);
    static float32 dist_prev;
    dist_prev = dist;

    return dist;
}
